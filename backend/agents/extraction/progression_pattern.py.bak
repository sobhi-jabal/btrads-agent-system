"""Agent for analyzing progression patterns"""
from typing import Dict, Any, List, Optional
import logging

from agents.base import BaseAgent
from models.agent import AgentResult

logger = logging.getLogger(__name__)

class ProgressionPatternAgent(BaseAgent):
    """Agent responsible for analyzing progression patterns"""
    
    def __init__(self):
        super().__init__(
            agent_id="progression-pattern",
            name="Progression Pattern Agent",
            description="Analyzes patterns of tumor progression"
        )
    
    async def extract(self, clinical_note: str, context: Dict[str, Any], patient_id: str) -> AgentResult:
        """Extract progression pattern from clinical note"""
        try:
            # Use Ollama for extraction
            prompt = self._create_prompt(clinical_note)
            
            # Extract progression pattern information
            extracted_data = await self._call_llm(prompt)
            
            # Determine pattern type
            pattern_type = extracted_data.get("pattern_type", "unknown")
            
            result_data = {
                "pattern_type": pattern_type,
                "pattern_description": extracted_data.get("pattern_description", ""),
                "progression_features": extracted_data.get("progression_features", []),
                "is_infiltrative": extracted_data.get("is_infiltrative", False),
                "is_expansive": extracted_data.get("is_expansive", False),
                "involves_csf": extracted_data.get("involves_csf", False)
            }
            
            # Find source sentences
            source_highlights = await self._highlight_sources(
                clinical_note, 
                extracted_data.get("evidence_sentences", [])
            )
            
            return AgentResult(
                agent_id=self.agent_id,
                patient_id=patient_id,
                node_id="progression-pattern",
                extracted_value=result_data,
                confidence=extracted_data.get("confidence", 0.7),
                reasoning=extracted_data.get("reasoning", ""),
                source_highlights=source_highlights
            )
            
        except Exception as e:
            logger.error(f"Error in ProgressionPatternAgent: {e}")
            return self._create_error_result(patient_id, str(e))
    
    def _create_prompt(self, clinical_note: str) -> str:
        """Create prompt for progression pattern analysis"""
        return f"""
        Analyze the progression pattern described in this clinical note.
        
        Clinical Note:
        {clinical_note}
        
        Task: Identify the pattern of tumor progression.
        Look for:
        - Infiltrative patterns (spreading along white matter tracts)
        - Expansive/mass-like growth
        - CSF dissemination or leptomeningeal involvement
        - Subependymal spread
        - Descriptions of how the tumor is growing or spreading
        
        Common patterns include:
        - Infiltrative: spreading along white matter, poorly defined margins
        - Expansive: well-defined mass effect, pushing boundaries
        - Mixed: combination of patterns
        - CSF dissemination: spread through cerebrospinal fluid spaces
        
        Provide your response in JSON format:
        {{
            "pattern_type": "infiltrative|expansive|mixed|csf_dissemination|unknown",
            "pattern_description": "description of the pattern",
            "progression_features": ["list of specific features mentioned"],
            "is_infiltrative": true/false,
            "is_expansive": true/false,
            "involves_csf": true/false,
            "evidence_sentences": ["list of relevant sentences"],
            "confidence": 0.0-1.0,
            "reasoning": "brief explanation"
        }}
        """
    
    async def validate(self, result: AgentResult, feedback: Dict[str, Any]) -> AgentResult:
        """Validate progression pattern analysis"""
        # Update result based on feedback
        if "pattern_type" in feedback:
            result.extracted_value["pattern_type"] = feedback["pattern_type"]
        
        if "progression_features" in feedback:
            result.extracted_value["progression_features"] = feedback["progression_features"]
        
        result.validation_status = "validated"
        result.validated_value = result.extracted_value
        result.validator_notes = feedback.get("notes", "")
        
        return result