"""Agent for analyzing imaging components"""
from typing import Dict, Any, List, Optional
import logging

from agents.base import BaseAgent
from models.agent import AgentResult

logger = logging.getLogger(__name__)

class ComponentAnalysisAgent(BaseAgent):
    """Agent responsible for analyzing enhancement and FLAIR components"""
    
    def __init__(self):
        super().__init__(
            agent_id="component-analysis",
            name="Component Analysis Agent",
            description="Analyzes enhancement and FLAIR components for changes"
        )
    
    async def extract(self, clinical_note: str, context: Dict[str, Any], patient_id: str) -> AgentResult:
        """Extract component analysis from clinical note"""
        try:
            # Use Ollama for extraction
            prompt = self._create_prompt(clinical_note, context)
            
            # Extract component information
            extracted_data = await self._call_llm(prompt)
            
            # Get change data from context
            flair_change = context.get("flair_change_percentage", 0)
            enhancement_change = context.get("enhancement_change_percentage", 0)
            
            # Determine component behavior
            flair_increased = flair_change > 0
            enhancement_increased = enhancement_change > 0
            
            # Check for opposite direction changes (enhancement priority rule)
            opposite_direction = (flair_increased and not enhancement_increased) or \
                               (not flair_increased and enhancement_increased)
            
            result_data = {
                "flair_change": flair_change,
                "enhancement_change": enhancement_change,
                "flair_increased": flair_increased,
                "enhancement_increased": enhancement_increased,
                "opposite_direction": opposite_direction,
                "dominant_component": "enhancement" if opposite_direction else "both",
                "component_description": extracted_data.get("component_description", "")
            }
            
            # Find source sentences
            source_highlights = await self._highlight_sources(
                clinical_note, 
                extracted_data.get("evidence_sentences", [])
            )
            
            return AgentResult(
                agent_id=self.agent_id,
                patient_id=patient_id,
                node_id="component-analysis",
                extracted_value=result_data,
                confidence=extracted_data.get("confidence", 0.8),
                reasoning=extracted_data.get("reasoning", ""),
                source_highlights=source_highlights
            )
            
        except Exception as e:
            logger.error(f"Error in ComponentAnalysisAgent: {e}")
            return self._create_error_result(patient_id, str(e))
    
    def _create_prompt(self, clinical_note: str, context: Dict[str, Any]) -> str:
        """Create prompt for component analysis"""
        flair_change = context.get("flair_change_percentage", 0)
        enhancement_change = context.get("enhancement_change_percentage", 0)
        
        return f"""
        Analyze the imaging component changes described in this clinical note.
        
        Clinical Note:
        {clinical_note}
        
        Known measurements:
        - FLAIR change: {flair_change:.1f}%
        - Enhancement change: {enhancement_change:.1f}%
        
        Task: Extract descriptions of how the FLAIR and enhancement components changed.
        Look for:
        - Descriptions of FLAIR signal changes
        - Descriptions of enhancement patterns
        - Any mentions of which component is dominant
        - Qualitative assessments of changes
        
        Provide your response in JSON format:
        {{
            "component_description": "description of component changes",
            "flair_description": "specific FLAIR changes if mentioned",
            "enhancement_description": "specific enhancement changes if mentioned",
            "evidence_sentences": ["list of relevant sentences"],
            "confidence": 0.0-1.0,
            "reasoning": "brief explanation"
        }}
        """
    
    async def validate(self, result: AgentResult, feedback: Dict[str, Any]) -> AgentResult:
        """Validate component analysis"""
        # Update result based on feedback
        if "dominant_component" in feedback:
            result.extracted_value["dominant_component"] = feedback["dominant_component"]
        
        if "component_description" in feedback:
            result.extracted_value["component_description"] = feedback["component_description"]
        
        result.validation_status = "validated"
        result.validated_value = result.extracted_value
        result.validator_notes = feedback.get("notes", "")
        
        return result